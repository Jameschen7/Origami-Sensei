<!doctype html>
<html lang=en style="overflow:hidden;">

<head>
    <meta charset=utf-8>
    <!-- set the width of the page for responsive design -->
    {# <meta name="viewport" content="width={{ width }}, height={{ height }}, initial-scale=1">  <!-- 9:16 resolution--> #}
    <meta name="viewport" content="width=device-width, initial-scale=1">  <!-- 9:16 resolution-->

    <title>Origami Sensei Projection Website</title>

    {# <link rel="preconnect" href="static/fonts/"> # only benefit future cross-origin HTTP request #}
    <link rel="stylesheet" href="static/fonts/inter.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        html {
            height: 100%; /* to enable percentage as unit */

            /* text */
            font-family: "Inter", "Verdana", sans-serif;
            font-weight: 500
        }
        body {
            min-height: 100%;
        }
        
        /* style for the top left, top middle, top right blacks */
        .blue-block {
            position:fixed;
            margin-top: 2%;
            padding: 1.5% 2%;

            color: #000000;
            background-color: #E2EEFF;
            border: 1px solid #79AFFF;
            border-radius: 10px;
            overflow: hidden; 
            background-clip: padding-box;
        }

        /* in case use float: https://www.w3schools.com/css/css_align.asp */
        .blue-block::after {
            content: "";
            clear: both;
            display: table;
        }
    </style>

    <script type="text/javascript">
        window.onload = function() {
            {% for key, value in instruction_texts.items() %}
            localStorage.setItem("instruction_text_{{ key|trim|e }}", "{{ value|trim|e }}");
            {% endfor %}
            localStorage.setItem("curr_stage", "{{valid_stage}}"); // store the current valid stage on the client side
            localStorage.setItem("total_step_num", "{{total_step_num}}"); 

            setTimeout( function() { 
                console.log("window.onload triggered");
                const source = new EventSource("/param/stream");
                source.onmessage = function(event) {
                    console.log("NEW Param:", event.data);
                    const curr_stage = localStorage.getItem("curr_stage");

                    // convert string into dict as obj
                    const param_array = event.data.split(";");
                    const para_dict = new Object();
                    for (let param of param_array) {
                        let param_info = param.split(":");
                        let param_name = param_info[0];
                        let param_val = param_info[1];
                        para_dict[param_name] = param_val;
                    } 

                    // Update image element
                    const img_element = document.getElementById("instruction-image"); 
                    img_element.style.setProperty("left", para_dict["x_coord"]+"{{coord_unit}}");
                    img_element.style.setProperty("top", para_dict["y_coord"]+"{{coord_unit}}");
                    img_element.style.setProperty("transform", "scale("+para_dict["scale"]+")");
                    /* if (para_dict["stage"] == "0") {
                         img_element.style.visibility = "hidden";
                    } */
                    // img_element.style.visibility = "visible";

                    // only update if the stage changes
                    if (curr_stage != para_dict["valid_stage"]) {
                        img_element.src = "{{ instruction_img_path_prefix }}"+para_dict["valid_stage"]+".png";
                        
                        // Update the progress bar
                        const total_step_num = localStorage.getItem("total_step_num");
                        const progess_text_element = document.getElementById("progress-text"); 
                        // progess_text_element.innerText = "Progress: "+para_dict["valid_stage"]+"/"+total_step_num;
                        progess_text_element.innerText = `Progress: ${para_dict["valid_stage"]}/${total_step_num}`;
                        const progess_bar_element = document.getElementById("progress-bar"); 
                        progess_bar_element.style.width = (parseInt(para_dict["valid_stage"])/parseInt(total_step_num)*100).toFixed() + "%";
    
                        // Update the instruction gif
                        const gif_element = document.getElementById("instruction-animation"); 
                        if (para_dict["valid_stage"] != total_step_num) {
                            gif_element.src = "{{ instruction_gif_path_prefix }}"+para_dict["valid_stage"]+".gif";
                        } else {
                            gif_element.src = "{{ instruction_gif_path_prefix }}"+toFixed( parseInt(total_step_num)-1 )+".gif";
                        }

                        // update the instruction text
                        const inst_text_element = document.getElementById("instruction-text");
                        const instruction_text = localStorage.getItem("instruction_text_"+para_dict["valid_stage"]);
                        inst_text_element.innerText = instruction_text;

                        // update the current stage
                        localStorage.setItem("curr_stage", para_dict["valid_stage"]); // set the current valid stage stored on the client side
                    } 
                    /* else {
                        console.log("Same stage, skipped!")
                    } */
                };
            }, 1000); // execute after 1s to ensure full loading
        };
    </script>
</head>


{# <body style="border: medium solid green ; width: {{ width }}px; height: {{ height }}px;  #}
<body>
    <!-- Instruction image -->
    <img id="instruction-image" src="{{ instruction_img_path_prefix }}{{ stage }}.png" alt="instruction image"
         style="position: fixed; 
                top: {{ y_coord }}{{coord_unit}}; 
                left: {{ x_coord }}{{coord_unit}}; 
                transform: scale({{ scale }});
                ">

    <!-- middle instruction block (wrapped by a div so that the blue boundary is bound by text length) -->
    <div style="position: fixed; margin: 2% auto 0; left:25vw; width:50vw; display:flex; align-items:center;">
        <div class="blue-block" style="border-radius:20px; position: static; margin:0 auto;">
            <p id="instruction-text" style="text-align:center; margin:auto; font-weight:600; font-size: 1.2em">
                {{instruction_texts[valid_stage]|trim}}
            </p>
        </div>
    </div>
    {# <div class="blue-block" style="border-radius:20px; position: fixed; margin:2% auto 0; left:25vw; width:50vw; display:flex; align-items:center">
        <p id="instruction-text" style="text-align:center; margin:auto; font-weight:600; font-size: 1.2em">
            {{instruction_texts[valid_stage]|trim}}
        </p>
    </div> #}
    

    <!-- Left block -->
    <div class="blue-block" style="left: 2vw; width: 20vw; min-height: 20vw"> <!-- the horizontal layout is fixed, and extend in the vertical axis -->
        <p id="progress-text" style="font-weight: 500;">Progress: {{valid_stage}}/{{total_step_num}}</p>
        <div style="border-radius:7px; border: 2px solid #000000; height:1.3em; margin:0.5em 0 1em; padding: 0.15em 0.15em 0.14em;
                    display:flex; align-items:center"> 
            <div id="progress-bar" style="background-color: black; border-radius:5px; 
                                          width:{{valid_stage / total_step_num * 100}}%; height:100%;"></div>
        </div>
        <!-- display the final shape -->
        <div style="display:flex; align-items:center; height:10vw; width:100%">
            <img src="{{ final_step_image_path }}" style="max-width:95%; max-height:100%; margin:0ex auto 0ex;">
        </div>
    </div>
    
    <!-- Right block -->
    <div class="blue-block" style="right: 2vw; width: 20vw; min-height: 20vw; display:flex; align-items:center">
        <img id="instruction-animation" src="{{ instruction_gif_path_prefix }}{{ valid_stage if valid_stage != total_step_num else total_step_num-1 }}.gif" 
             style="width:85%; max-width:95%; margin:auto; padding-bottom:3%;">
    </div>


    <!-- for debug only-->
    {# <div class="blue-block" style="left: 2vw; top:50%; width: 15vw; height: 25vh">
        <p>Debug only: 
        stage={{ stage }}, <br>
        scale={{ scale }}, <br>
        x_coord={{ x_coord }},  <br>
        y_coord={{ y_coord }}  <br>
        </p>
    </div> #}


    <!-- for calibration and set-up purpose only; can comment out afterwards-->
    <div id="calibration-vertible-bar" 
        style="position: fixed; left:49.5vw; height:100%; width:1vw; background-color: #00000020"></div>
    {# <div id="calibration-square" 
        style="position: fixed; height:345px; width:345px; background-color: #000000;
               left:50%; top:50%; transform: scale(1) translate(-50%, -50%);
               "></div> #}

    {# temp to be lower and more to the right, so scale issue? #}
    {# <div id="calibration-square" 
        style="position: fixed; height:100px; width:100px; background-color: #000000;
               left:623px; top:286px;
               "></div> #}
</body>